{"version":3,"sources":["config/config.js","store/actionTypes.js","store/store.js","components/DialogFlow.js","httpActions/uploadFile.js","components/UploadFileDialog.js","components/ToastMessages.js","App.js","serviceWorker.js","index.js"],"names":["dialogFlowSettings","defaultIntent","title","agentId","window","DIALOGFLOW_AGENT_ID","httpApiSettings","host","API_HOST","ACTION_TYPES","initialState","dialogFlowSessionId","dialogFlowMessageQueue","toastMessages","store","createContext","Provider","StateProvider","children","useReducer","state","action","type","payload","axios","interceptors","request","use","config","headers","Dfsessionid","error","Promise","reject","dispatch","value","DialogFlow","handleUploadTriggered","React","useContext","scriptTagElement","useRef","dfMessenger","messageQueue","useEffect","current","dfEl","document","createElement","setAttribute","scriptEl","body","appendChild","head","addEventListener","evt","detail","response","queryResult","fulfillmentMessages","forEach","message","handleFulfillmentMessage","sessionId","renderCustomText","join","parameters","uploadFile","file","formData","FormData","append","post","useStyles","makeStyles","theme","fileContainer","height","backgroundColor","palette","grey","dropZone","typography","body1","uploadedFile","display","flexDirection","alignItems","justifyContent","marginRight","spacing","UploadFileDialog","open","uploadFileType","handleClose","handleUploadComplete","cssClasses","useState","setFile","handleSubmit","a","data","console","Dialog","onClose","fullWidth","DialogTitle","DialogContent","Box","className","Typography","name","Tooltip","IconButton","color","onClick","CloseOutlined","acceptedMimeTypes","onFilesAdded","files","onFilesRejected","blockOtherDrops","DialogActions","Button","variant","disabled","ToastMessages","isOpen","setIsOpen","map","index","Snackbar","autoHideDuration","key","SnackbarContent","App","fileUploadType","setFileUploadType","resp","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fe8a5842.chunk.js","sourcesContent":["export const dialogFlowSettings = {\r\n    defaultIntent: 'WELCOME',\r\n    title: 'ClaimBot',\r\n    agentId: window.DIALOGFLOW_AGENT_ID || 'ce617fac-032a-442b-8976-36b110b58133'\r\n}\r\n\r\nexport const httpApiSettings = {\r\n    host: window.API_HOST || 'http://127.0.0.1:5000'\r\n}","export const ACTION_TYPES = {\r\n    SET_DIALOG_FLOW_SESSION_ID: 'SET_DIALOG_FLOW_SESSION_ID',\r\n    ADD_TO_DIALOG_FLOW_MESSAGE_QUEUE: 'ADD_TO_DIALOG_FLOW_MESSAGE_QUEUE',\r\n    ADD_TOAST_MESSAGE: 'ADD_TOAST_MESSAGE',\r\n    CLEAR_TOAST_MESSAGES: 'CLEAR_TOAST_MESSAGES'\r\n}","// store.js\r\nimport React, {createContext, useReducer} from 'react';\r\nimport { ACTION_TYPES } from './actionTypes'\r\nimport axios from 'axios'\r\n\r\nexport const initialState = {\r\n    dialogFlowSessionId: '',\r\n    dialogFlowMessageQueue: [],\r\n    toastMessages: []\r\n};\r\nexport const store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\nexport const StateProvider = ( { children } ) => {\r\n    const [state, dispatch] = useReducer((state, action) => {\r\n    switch(action.type) {\r\n        case ACTION_TYPES.CLEAR_TOAST_MESSAGES:\r\n            return {\r\n                ...state,\r\n                toastMessages: []\r\n            }\r\n\r\n        case ACTION_TYPES.ADD_TOAST_MESSAGE:\r\n            return {\r\n                ...state,\r\n                toastMessages: [...state.toastMessages, action.payload]\r\n            }\r\n\r\n        case ACTION_TYPES.ADD_TO_DIALOG_FLOW_MESSAGE_QUEUE:\r\n            return {\r\n                ...state,\r\n                dialogFlowMessageQueue: [...state.dialogFlowMessageQueue, ...action.payload]\r\n            }\r\n\r\n        case ACTION_TYPES.SET_DIALOG_FLOW_SESSION_ID:\r\n\r\n            if (state.dialogFlowSessionId !== action.payload) {\r\n                axios.interceptors.request.use(function (config) {\r\n                    config.headers = {\r\n                        ...config.headers,\r\n                        Dfsessionid: action.payload\r\n                    }\r\n                    return config\r\n                }, function (error) {\r\n                    return Promise.reject(error)\r\n                });\r\n\r\n                return {\r\n                    ...state,\r\n                    dialogFlowSessionId: action.payload\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state\r\n    };\r\n    }, initialState);\r\n\r\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};","import React from 'react'\r\nimport { dialogFlowSettings } from '../config/config'\r\nimport { store } from '../store/store'\r\nimport { ACTION_TYPES } from '../store/actionTypes'\r\n\r\nexport function DialogFlow ({\r\n    handleUploadTriggered = () => {}\r\n}) {\r\n\r\n    const {state, dispatch} = React.useContext(store)\r\n    const scriptTagElement = React.useRef(null)\r\n    const dfMessenger = React.useRef(null)\r\n    const { dialogFlowMessageQueue: messageQueue } = state\r\n\r\n    // on mount\r\n    React.useEffect(() => {\r\n        if (!dfMessenger.current) {\r\n            const dfEl = document.createElement('df-messenger')\r\n            dfEl.setAttribute('intent', dialogFlowSettings.defaultIntent)\r\n            dfEl.setAttribute('chat-title', dialogFlowSettings.title)\r\n            dfEl.setAttribute('agent-id', dialogFlowSettings.agentId)\r\n            dfEl.setAttribute('language-code', 'en')\r\n            dfMessenger.current = dfEl\r\n        }\r\n\r\n        if (!scriptTagElement.current) {\r\n            const scriptEl = document.createElement('script')\r\n            scriptEl.setAttribute('src', 'https://www.gstatic.com/dialogflow-console/fast/messenger/bootstrap.js?v=1')\r\n            scriptTagElement.current = scriptEl\r\n        }\r\n\r\n        document.body.appendChild(dfMessenger.current)\r\n        document.head.appendChild(scriptTagElement.current)\r\n        \r\n        dfMessenger.current.addEventListener('df-response-received', (evt) => {\r\n            const messages = evt.detail.response.queryResult.fulfillmentMessages\r\n            messages.forEach((message) => {\r\n                handleFulfillmentMessage(message)\r\n            })\r\n        })\r\n\r\n    }, [])\r\n\r\n    // When session id is updated, update store\r\n    React.useEffect(() => {\r\n        if (dfMessenger.current && dfMessenger.current.sessionId) {\r\n            dispatch({\r\n                type: ACTION_TYPES.SET_DIALOG_FLOW_SESSION_ID,\r\n                payload: dfMessenger.current.sessionId\r\n            })\r\n        }\r\n    }, [dfMessenger.current? dfMessenger.current.sessionId : null])\r\n\r\n    React.useEffect(() => {\r\n        messageQueue.forEach((message) => {\r\n            dfMessenger.current.renderCustomText(message)\r\n        })\r\n    }, [messageQueue.join(',')])\r\n\r\n\r\n    // Handle custom payload\r\n    const handleFulfillmentMessage = ({payload=null}) => {\r\n        if (!payload) return\r\n\r\n        switch(payload.action) {\r\n            case 'fileUpload':\r\n                handleUploadTriggered(payload.parameters.type)\r\n                break\r\n        }\r\n    }\r\n\r\n\r\n    return null\r\n}","import axios from 'axios'\r\nimport { httpApiSettings } from '../config/config'\r\n\r\nexport function uploadFile(type, file) {\r\n    \r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n    formData.append('type', type)\r\n\r\n    return axios.post(`${httpApiSettings.host}/claim/uploadfile`, formData, {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    })\r\n}","import React from 'react'\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, makeStyles, Box, Button, Typography, IconButton, Tooltip } from '@material-ui/core'\r\nimport { FileDropZone, image } from 'mui-dropzone'\r\nimport { InsertDriveFileOutlined as FileIcon, CloseOutlined } from '@material-ui/icons';\r\nimport { uploadFile } from '../httpActions/uploadFile';\r\nimport { store } from '../store/store';\r\nimport { ACTION_TYPES } from '../store/actionTypes';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    fileContainer: {\r\n        height: 200,\r\n        backgroundColor: theme.palette.grey[100]\r\n    },\r\n    dropZone: {\r\n        height: '100%',\r\n        '& h4': {\r\n            ...theme.typography.body1\r\n        }\r\n    },\r\n    uploadedFile: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n\r\n        '& > *': {\r\n            marginRight: theme.spacing(1),\r\n\r\n            '&:last-child': {\r\n                marginRight: 0\r\n            }\r\n        }\r\n    }\r\n}))\r\n\r\nexport function UploadFileDialog({\r\n    open = false,\r\n    uploadFileType = 'hospitalBill',\r\n    handleClose = () => {},\r\n    handleUploadComplete = (file) => {}\r\n}) {\r\n\r\n    const cssClasses = useStyles({})\r\n    const [file, setFile] = React.useState(null)\r\n    const { dispatch } = React.useContext(store)\r\n\r\n    React.useEffect(() => {\r\n        if (open) {\r\n            setFile(null)\r\n        }\r\n    }, [open])\r\n    \r\n    const handleFileChange = (files) => {\r\n        if (!files[0]) {\r\n            setFile(null)\r\n        } else {\r\n            setFile(files[0])\r\n        }\r\n    }\r\n\r\n    const handleFileRejected = (evt) => {\r\n        setFile(null)\r\n        dispatch({\r\n            type: ACTION_TYPES.ADD_TOAST_MESSAGE,\r\n            payload: 'This file type is not allowed'\r\n        })\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        if (!file) return\r\n        try {\r\n            const { data } = await uploadFile(uploadFileType, file)\r\n            handleUploadComplete(data)\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={handleClose} fullWidth={true}>\r\n            <DialogTitle>Upload File</DialogTitle>\r\n            <DialogContent>\r\n                <Box className={cssClasses.fileContainer}>\r\n                    {!!file?\r\n                        (\r\n                            <Box className={cssClasses.uploadedFile}>\r\n                                <FileIcon />\r\n                                <Typography>{file.name}</Typography>\r\n                                <Tooltip title=\"Remove\">\r\n                                    <IconButton color=\"secondary\" onClick={()=>setFile(null)}><CloseOutlined /></IconButton>\r\n                                </Tooltip>\r\n                            </Box>\r\n                        )\r\n                        : (\r\n                            <FileDropZone\r\n                                acceptedMimeTypes={['image/*','application/pdf']}\r\n                                onFilesAdded={handleFileChange}\r\n                                onFilesRejected={handleFileRejected}\r\n                                blockOtherDrops={true}\r\n                                className={cssClasses.dropZone}\r\n                            />\r\n                        )\r\n                    }\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button \r\n                    color=\"secondary\" \r\n                    onClick={handleClose}\r\n                >Cancel</Button>\r\n                <Button \r\n                    color=\"primary\" \r\n                    variant=\"contained\" \r\n                    disabled={!file}\r\n                    onClick={handleSubmit}\r\n                >Submit</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}","import React from 'react'\r\nimport { Snackbar, SnackbarContent } from '@material-ui/core'\r\nimport { store } from '../store/store'\r\nimport { ACTION_TYPES } from '../store/actionTypes'\r\n\r\nexport function ToastMessages() {\r\n\r\n    const { state, dispatch } = React.useContext(store)\r\n    const [isOpen, setIsOpen] = React.useState(false)\r\n\r\n    const { toastMessages } = state\r\n\r\n    React.useEffect(() => {\r\n        setIsOpen(true)\r\n    }, [toastMessages.join(',')])\r\n\r\n    const handleClose = () => {\r\n        setIsOpen(false)\r\n        dispatch({\r\n            type: ACTION_TYPES.CLEAR_TOAST_MESSAGES\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {toastMessages.map((message, index) => (\r\n                <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose} key={index}>\r\n                    <SnackbarContent message={message} />\r\n                </Snackbar>\r\n            ))}\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport { DialogFlow } from './components/DialogFlow'\nimport { UploadFileDialog } from './components/UploadFileDialog'\nimport { ToastMessages } from './components/ToastMessages'\nimport { store } from './store/store'\nimport { ACTION_TYPES } from './store/actionTypes'\n\nfunction App() {\n\n  const { state, dispatch } = React.useContext(store)\n\n  const [fileUploadType, setFileUploadType] = React.useState()\n\n  const handleUploadTriggered = (type) => {\n    setFileUploadType(type)\n  }\n\n  const closeFileUploadDialog = () => {\n    setFileUploadType('')\n  }\n\n  const handleUploadComplete = (resp) => {\n    setFileUploadType('')\n    dispatch({\n      type: ACTION_TYPES.ADD_TO_DIALOG_FLOW_MESSAGE_QUEUE,\n      payload: [resp.fulfillmentMessages]\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <ToastMessages />\n      <DialogFlow \n        handleUploadTriggered={handleUploadTriggered}\n      />\n      <UploadFileDialog  \n        open={!!fileUploadType}\n        uploadFileType={fileUploadType}\n        handleClose={closeFileUploadDialog}\n        handleUploadComplete={handleUploadComplete}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './store/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}